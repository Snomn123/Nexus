version: '3.8'

# Production Docker Compose Configuration
# For production deployment of Nexus

services:
  postgres:
    image: postgres:15-alpine
    container_name: nexus_postgres_prod
    environment:
      POSTGRES_USER: ${DB_USER:-nexus_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-nexus}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - nexus_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-nexus_user} -d ${DB_NAME:-nexus}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Security: Don't expose database port externally in production
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: nexus_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
    networks:
      - nexus_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    # Security: Don't expose Redis port externally in production
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: nexus_backend_prod
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-nexus}
      DB_USER: ${DB_USER:-nexus_user}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-https://localhost}
      TRUST_PROXY: true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nexus_network_prod
    restart: unless-stopped
    volumes:
      - backend_uploads_prod:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Security optimizations
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
        REACT_APP_API_URL: ${FRONTEND_URL:-https://localhost}/api
        REACT_APP_SOCKET_URL: ${FRONTEND_URL:-https://localhost}
    container_name: nexus_frontend_prod
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - nexus_network_prod
    restart: unless-stopped
    # Security: Run as non-root
    read_only: true
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  # Production reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: nexus_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache_prod:/var/cache/nginx
      - nginx_logs_prod:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - nexus_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

networks:
  nexus_network_prod:
    driver: bridge
    # Security: Internal network isolation
    internal: false
    driver_opts:
      com.docker.network.bridge.name: nexus_prod

volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  backend_uploads_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uploads
  nginx_cache_prod:
    driver: local
  nginx_logs_prod:
    driver: local