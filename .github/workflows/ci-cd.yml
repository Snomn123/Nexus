name: CI/CD Pipeline

on:
  push:
    branches: [ main, production, develop ]
  pull_request:
    branches: [ main, production ]

permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '18'
  
jobs:
  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Lint Frontend Code
      run: |
        cd frontend
        npm run lint
        
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
      env:
        CI: false
        PUBLIC_URL: /${{ github.event.repository.name }}
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 1
        
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
        
    - name: Upload Frontend Coverage
      uses: codecov/codecov-action@v3
      with:
        flags: frontend
        directory: frontend/coverage
        
  # Backend Testing  
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: nexus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci
        
    - name: Lint Backend Code
      run: |
        cd backend
        npm run lint
        
    - name: Run Database Migrations
      run: |
        cd backend
        npm run migrate
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: nexus_test
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        
    - name: Run Backend Tests
      run: |
        cd backend
        npm run test:coverage
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: nexus_test
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        
    - name: Upload Backend Coverage
      uses: codecov/codecov-action@v3
      with:
        flags: backend
        # Node.js built-in test runner doesn't generate lcov files
        # Coverage is reported in the test output above

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Run Security Audit (Frontend)
      run: |
        cd frontend
        npm audit --audit-level high
        
    - name: Run Security Audit (Backend)
      run: |
        cd backend
        npm audit --audit-level high
        
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: nexus-frontend:test
        
    - name: Build Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: nexus-backend:test

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Start Services
      run: |
        docker compose up -d postgres redis
        sleep 15
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Setup Test Database
      run: |
        cd backend
        npm run migrate
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: nexus
        DB_USER: postgres
        DB_PASSWORD: password
        
    - name: Run Integration Tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: nexus
        DB_USER: postgres
        DB_PASSWORD: password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret

  # Deployment (Production only)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan, docker-build, integration-test]
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-build
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        enablement: true
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'frontend-build'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
        
    - name: Notify Deployment Success
      if: success()
      run: |
        curl -H "Content-Type: application/json" \
        -d "{
          \"embeds\": [{
            \"title\": \"ðŸŸ¢ Deployment Successful\",
            \"description\": \"Nexus has been successfully deployed to production!\",
            \"color\": 65280,
            \"fields\": [
              {\"name\": \"Repository\", \"value\": \"${{ github.repository }}\", \"inline\": true},
              {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
              {\"name\": \"Commit\", \"value\": \"[\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\", \"inline\": true},
              {\"name\": \"Deployed URL\", \"value\": \"${{ steps.deployment.outputs.page_url }}\", \"inline\": false}
            ],
            \"timestamp\": \"${{ github.event.head_commit.timestamp }}\"
          }]
        }" \
        https://discord.com/api/webhooks/1422292122379489382/-byv4FZD8pHsIt5VXx9Fb-4UTa49ck_5BmTkD4f6gENJ90xlFKsNf34RpM3EGC5IT_GL
        
    - name: Notify Deployment Failure
      if: failure()
      run: |
        curl -H "Content-Type: application/json" \
        -d "{
          \"embeds\": [{
            \"title\": \"ðŸ”´ Deployment Failed\",
            \"description\": \"Nexus deployment to production has failed.\",
            \"color\": 16711680,
            \"fields\": [
              {\"name\": \"Repository\", \"value\": \"${{ github.repository }}\", \"inline\": true},
              {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
              {\"name\": \"Commit\", \"value\": \"[\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\", \"inline\": true},
              {\"name\": \"Workflow Run\", \"value\": \"[View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\", \"inline\": false}
            ],
            \"timestamp\": \"${{ github.event.head_commit.timestamp }}\"
          }]
        }" \
        https://discord.com/api/webhooks/1422292122379489382/-byv4FZD8pHsIt5VXx9Fb-4UTa49ck_5BmTkD4f6gENJ90xlFKsNf34RpM3EGC5IT_GL

  # Discord Notifications for CI/CD Status
  notify:
    name: CI/CD Status Notification
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan, docker-build, integration-test, deploy]
    if: always() && (failure() || cancelled())
    
    steps:
    - name: Notify CI/CD Failure
      run: |
        # Determine which jobs failed
        FAILED_JOBS=""
        [[ "${{ needs.frontend-test.result }}" == "failure" ]] && FAILED_JOBS="$FAILED_JOBS Frontend Tests,"
        [[ "${{ needs.backend-test.result }}" == "failure" ]] && FAILED_JOBS="$FAILED_JOBS Backend Tests,"
        [[ "${{ needs.security-scan.result }}" == "failure" ]] && FAILED_JOBS="$FAILED_JOBS Security Scan,"
        [[ "${{ needs.docker-build.result }}" == "failure" ]] && FAILED_JOBS="$FAILED_JOBS Docker Build,"
        [[ "${{ needs.integration-test.result }}" == "failure" ]] && FAILED_JOBS="$FAILED_JOBS Integration Tests,"
        [[ "${{ needs.deploy.result }}" == "failure" ]] && FAILED_JOBS="$FAILED_JOBS Deployment,"
        
        # Remove trailing comma
        FAILED_JOBS=${FAILED_JOBS%,}
        
        curl -H "Content-Type: application/json" \
        -d "{
          \"embeds\": [{
            \"title\": \"ðŸŸ¡ CI/CD Pipeline Failed\",
            \"description\": \"The Nexus CI/CD pipeline has encountered failures.\",
            \"color\": 16776960,
            \"fields\": [
              {\"name\": \"Repository\", \"value\": \"${{ github.repository }}\", \"inline\": true},
              {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
              {\"name\": \"Commit\", \"value\": \"[\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\", \"inline\": true},
              {\"name\": \"Failed Jobs\", \"value\": \"${FAILED_JOBS:-Unknown}\", \"inline\": false},
              {\"name\": \"Workflow Run\", \"value\": \"[View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\", \"inline\": false}
            ],
            \"timestamp\": \"${{ github.event.head_commit.timestamp }}\"
          }]
        }" \
        https://discord.com/api/webhooks/1422292122379489382/-byv4FZD8pHsIt5VXx9Fb-4UTa49ck_5BmTkD4f6gENJ90xlFKsNf34RpM3EGC5IT_GL