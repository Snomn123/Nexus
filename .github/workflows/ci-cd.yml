name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, production, develop ]
  pull_request:
    branches: [ main, production ]

env:
  NODE_VERSION: '18'
  
jobs:
  # Frontend Testing
  frontend-test:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
        
    - name: 🔍 Lint Frontend Code
      run: |
        cd frontend
        npm run lint
        
    - name: 🏗️ Build Frontend
      run: |
        cd frontend
        npm run build
        
    - name: 🧪 Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
        
    - name: 📊 Upload Frontend Coverage
      uses: codecov/codecov-action@v3
      with:
        flags: frontend
        directory: frontend/coverage
        
  # Backend Testing  
  backend-test:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: nexus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: 📦 Install Backend Dependencies
      run: |
        cd backend
        npm ci
        
    - name: 🔍 Lint Backend Code
      run: |
        cd backend
        npm run lint
        
    - name: 🗄️ Run Database Migrations
      run: |
        cd backend
        npm run migrate
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: nexus_test
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        
    - name: 🧪 Run Backend Tests
      run: |
        cd backend
        npm test -- --coverage
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: nexus_test
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        
    - name: 📊 Upload Backend Coverage
      uses: codecov/codecov-action@v3
      with:
        flags: backend
        directory: backend/coverage

  # Security Scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 🛡️ Run Security Audit (Frontend)
      run: |
        cd frontend
        npm audit --audit-level moderate
        
    - name: 🛡️ Run Security Audit (Backend)
      run: |
        cd backend
        npm audit --audit-level moderate
        
    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Docker Build Test
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: nexus-frontend:test
        
    - name: 🏗️ Build Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: nexus-backend:test

  # Integration Tests
  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐳 Start Services
      run: |
        docker-compose up -d postgres redis
        sleep 10
        
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: 🗄️ Setup Test Database
      run: |
        cd backend
        npm run migrate
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: nexus
        DB_USER: postgres
        DB_PASSWORD: password
        
    - name: 🧪 Run Integration Tests
      run: |
        cd backend
        npm run test:integration
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: nexus
        DB_USER: postgres
        DB_PASSWORD: password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret

  # Deployment (Production only)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan, docker-build, integration-test]
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://nexus.example.com
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Production
      run: |
        echo "🚀 Deploying to production..."
        echo "This would trigger your deployment process"
        # Add your deployment commands here
        
    - name: 📢 Notify Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: '🚀 Nexus has been deployed to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: always()