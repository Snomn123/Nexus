# Load environment variables from .env.docker file
# Copy .env.docker.example to .env.docker and update with your values

services:
  postgres:
    image: postgres:15-alpine
    container_name: nexus_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-nexus}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - nexus_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: nexus_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nexus_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: nexus_backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: nexus
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this-too}
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - nexus_network
    restart: unless-stopped
    volumes:
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nexus_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - nexus_network
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
      REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL:-http://localhost:5000}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  adminer:
    image: adminer
    container_name: nexus_adminer
    ports:
      - "8080:8080"
    networks:
      - nexus_network
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  nexus_network:
    driver: bridge