# Multi-stage production Dockerfile for Nexus Backend

# Stage 1: Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Remove unnecessary files
RUN rm -rf tests/ *.md .env.example

# Stage 2: Production stage
FROM node:18-alpine AS production

# Create app directory
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nexus -u 1001 -G nodejs

# Copy built application from builder stage
COPY --from=builder --chown=nexus:nodejs /app .

# Create necessary directories with correct permissions
RUN mkdir -p uploads logs tmp && \
    chown -R nexus:nodejs /app && \
    chmod -R 755 /app

# Install security updates
RUN apk upgrade --no-cache && \
    apk add --no-cache dumb-init

# Switch to non-root user
USER nexus

# Expose port
EXPOSE 5000

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "src/server.js"]